// Generated by view binder compiler. Do not edit!
package com.bersyte.noteapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.bersyte.noteapp.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentUpdateNoteBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final View colorView;

  @NonNull
  public final EditText etNoteDesc;

  @NonNull
  public final EditText etNoteTitle;

  @NonNull
  public final FloatingActionButton fabDone;

  @NonNull
  public final ConstraintLayout fcnLayout;

  @NonNull
  public final ImageView imgBack;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final ImageView noteDelete;

  private FragmentUpdateNoteBinding(@NonNull ConstraintLayout rootView, @NonNull View colorView,
      @NonNull EditText etNoteDesc, @NonNull EditText etNoteTitle,
      @NonNull FloatingActionButton fabDone, @NonNull ConstraintLayout fcnLayout,
      @NonNull ImageView imgBack, @NonNull LinearLayout linearLayout,
      @NonNull ImageView noteDelete) {
    this.rootView = rootView;
    this.colorView = colorView;
    this.etNoteDesc = etNoteDesc;
    this.etNoteTitle = etNoteTitle;
    this.fabDone = fabDone;
    this.fcnLayout = fcnLayout;
    this.imgBack = imgBack;
    this.linearLayout = linearLayout;
    this.noteDelete = noteDelete;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentUpdateNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentUpdateNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_update_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentUpdateNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.colorView;
      View colorView = ViewBindings.findChildViewById(rootView, id);
      if (colorView == null) {
        break missingId;
      }

      id = R.id.etNoteDesc;
      EditText etNoteDesc = ViewBindings.findChildViewById(rootView, id);
      if (etNoteDesc == null) {
        break missingId;
      }

      id = R.id.etNoteTitle;
      EditText etNoteTitle = ViewBindings.findChildViewById(rootView, id);
      if (etNoteTitle == null) {
        break missingId;
      }

      id = R.id.fabDone;
      FloatingActionButton fabDone = ViewBindings.findChildViewById(rootView, id);
      if (fabDone == null) {
        break missingId;
      }

      ConstraintLayout fcnLayout = (ConstraintLayout) rootView;

      id = R.id.imgBack;
      ImageView imgBack = ViewBindings.findChildViewById(rootView, id);
      if (imgBack == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.noteDelete;
      ImageView noteDelete = ViewBindings.findChildViewById(rootView, id);
      if (noteDelete == null) {
        break missingId;
      }

      return new FragmentUpdateNoteBinding((ConstraintLayout) rootView, colorView, etNoteDesc,
          etNoteTitle, fabDone, fcnLayout, imgBack, linearLayout, noteDelete);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
